"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Q = require('q');
var os = require('os');
var events = require('events');
var child = require('child_process');
var run = function (cmd, callback) {
    console.log('running: ' + cmd);
    var output = '';
    try {
    }
    catch (err) {
        console.log(err.message);
    }
};
;
function debug(message) {
    // do nothing, overridden
}
exports.debug = debug;
;
var ToolRunner = (function (_super) {
    __extends(ToolRunner, _super);
    function ToolRunner(toolPath) {
        debug('toolRunner toolPath: ' + toolPath);
        _super.call(this);
        this.toolPath = toolPath;
        this.args = [];
        this.silent = false;
    }
    ToolRunner.prototype._debug = function (message) {
        if (!this.silent) {
            debug(message);
        }
        this.emit('debug', message);
    };
    ToolRunner.prototype._argStringToArray = function (argString) {
        var args = [];
        var inQuotes = false;
        var escaped = false;
        var arg = '';
        var append = function (c) {
            // we only escape double quotes.
            if (escaped && c !== '"') {
                arg += '\\';
            }
            arg += c;
            escaped = false;
        };
        for (var i = 0; i < argString.length; i++) {
            var c = argString.charAt(i);
            if (c === '"') {
                if (!escaped) {
                    inQuotes = !inQuotes;
                }
                else {
                    append(c);
                }
                continue;
            }
            if (c === "\\" && inQuotes) {
                escaped = true;
                continue;
            }
            if (c === ' ' && !inQuotes) {
                if (arg.length > 0) {
                    args.push(arg);
                    arg = '';
                }
                continue;
            }
            append(c);
        }
        if (arg.length > 0) {
            args.push(arg.trim());
        }
        return args;
    };
    /**
     * Add argument
     * Append an argument or an array of arguments
     *
     * @param     val        string cmdline or array of strings
     * @returns   void
     */
    ToolRunner.prototype.arg = function (val) {
        if (!val) {
            return;
        }
        if (val instanceof Array) {
            this._debug(this.toolPath + ' arg: ' + JSON.stringify(val));
            this.args = this.args.concat(val);
        }
        else if (typeof (val) === 'string') {
            this._debug(this.toolPath + ' arg: ' + val);
            this.args = this.args.concat(val.trim());
        }
    };
    /**
     * Append argument command line string
     * e.g. '"arg one" two -z' would append args[]=['arg one', 'two', '-z']
     *
     * @param     val        string cmdline
     * @returns   void
     */
    ToolRunner.prototype.argString = function (val) {
        if (!val) {
            return;
        }
        this._debug(this.toolPath + ' arg: ' + val);
        this.args = this.args.concat(this._argStringToArray(val));
    };
    /**
     * Add path argument
     * Add path string to argument, path string should not contain double quoted
     * This will call arg(val, literal?) with literal equal 'true'
     *
     * @param     val     path argument string
     * @returns   void
     */
    ToolRunner.prototype.pathArg = function (val) {
        this._debug(this.toolPath + ' pathArg: ' + val);
        this.arg(val);
    };
    /**
     * Add argument(s) if a condition is met
     * Wraps arg().  See arg for details
     *
     * @param     condition     boolean condition
     * @param     val     string cmdline or array of strings
     * @returns   void
     */
    ToolRunner.prototype.argIf = function (condition, val) {
        if (condition) {
            this.arg(val);
        }
    };
    /**
     * Exec a tool.
     * Output will be streamed to the live console.
     * Returns promise with return code
     *
     * @param     tool     path to tool to exec
     * @param     options  optional exec options.  See IExecOptions
     * @returns   number
     */
    ToolRunner.prototype.exec = function (options) {
        var _this = this;
        var defer = Q.defer();
        this._debug('exec tool: ' + this.toolPath);
        this._debug('Arguments:');
        this.args.forEach(function (arg) {
            _this._debug('   ' + arg);
        });
        var success = true;
        options = options || {};
        var ops = {
            cwd: options.cwd || process.cwd(),
            env: options.env || process.env,
            silent: options.silent || false,
            failOnStdErr: options.failOnStdErr || false,
            ignoreReturnCode: options.ignoreReturnCode || false
        };
        ops.outStream = options.outStream || process.stdout;
        ops.errStream = options.errStream || process.stderr;
        var argString = this.args.join(' ') || '';
        var cmdString = this.toolPath;
        if (argString) {
            cmdString += (' ' + argString);
        }
        if (!ops.silent) {
            ops.outStream.write('[command]' + cmdString + os.EOL);
        }
        // TODO: filter process.env
        var cp = child.spawn(this.toolPath, this.args, { cwd: ops.cwd, env: ops.env });
        var processLineBuffer = function (data, strBuffer, onLine) {
            try {
                var s = strBuffer + data.toString();
                var n = s.indexOf(os.EOL);
                while (n > -1) {
                    var line = s.substring(0, n);
                    onLine(line);
                    // the rest of the string ...
                    s = s.substring(n + os.EOL.length);
                    n = s.indexOf(os.EOL);
                }
                strBuffer = s;
            }
            catch (err) {
                // streaming lines to console is best effort.  Don't fail a build.
                _this._debug('error processing line');
            }
        };
        var stdbuffer = '';
        cp.stdout.on('data', function (data) {
            _this.emit('stdout', data);
            if (!ops.silent) {
                ops.outStream.write(data);
            }
            processLineBuffer(data, stdbuffer, function (line) {
                _this.emit('stdline', line);
            });
        });
        var errbuffer = '';
        cp.stderr.on('data', function (data) {
            _this.emit('stderr', data);
            success = !ops.failOnStdErr;
            if (!ops.silent) {
                var s = ops.failOnStdErr ? ops.errStream : ops.outStream;
                s.write(data);
            }
            processLineBuffer(data, errbuffer, function (line) {
                _this.emit('errline', line);
            });
        });
        cp.on('error', function (err) {
            defer.reject(new Error(_this.toolPath + ' failed. ' + err.message));
        });
        cp.on('exit', function (code, signal) {
            _this._debug('rc:' + code);
            if (stdbuffer.length > 0) {
                _this.emit('stdline', stdbuffer);
            }
            if (errbuffer.length > 0) {
                _this.emit('errline', errbuffer);
            }
            if (code != 0 && !ops.ignoreReturnCode) {
                success = false;
            }
            _this._debug('success:' + success);
            if (success) {
                defer.resolve(code);
            }
            else {
                defer.reject(new Error(_this.toolPath + ' failed with return code: ' + code));
            }
        });
        return defer.promise;
    };
    /**
     * Exec a tool synchronously.
     * Output will be *not* be streamed to the live console.  It will be returned after execution is complete.
     * Appropriate for short running tools
     * Returns IExecResult with output and return code
     *
     * @param     tool     path to tool to exec
     * @param     options  optionalexec options.  See IExecOptions
     * @returns   IExecResult
     */
    ToolRunner.prototype.execSync = function (options) {
        var _this = this;
        var defer = Q.defer();
        this._debug('exec tool: ' + this.toolPath);
        this._debug('Arguments:');
        this.args.forEach(function (arg) {
            _this._debug('   ' + arg);
        });
        var success = true;
        options = options || {};
        var ops = {
            cwd: options.cwd || process.cwd(),
            env: options.env || process.env,
            silent: options.silent || false,
            failOnStdErr: options.failOnStdErr || false,
            ignoreReturnCode: options.ignoreReturnCode || false
        };
        ops.outStream = options.outStream || process.stdout;
        ops.errStream = options.errStream || process.stderr;
        var argString = this.args.join(' ') || '';
        var cmdString = this.toolPath;
        if (argString) {
            cmdString += (' ' + argString);
        }
        if (!ops.silent) {
            ops.outStream.write('[command]' + cmdString + os.EOL);
        }
        var r = child.spawnSync(this.toolPath, this.args, { cwd: ops.cwd, env: ops.env });
        if (r.stdout && r.stdout.length > 0) {
            ops.outStream.write(r.stdout);
        }
        if (r.stderr && r.stderr.length > 0) {
            ops.errStream.write(r.stderr);
        }
        var res = { code: r.status, error: r.error };
        res.stdout = r.stdout.toString();
        res.stderr = r.stderr.toString();
        return res;
    };
    return ToolRunner;
}(events.EventEmitter));
exports.ToolRunner = ToolRunner;
